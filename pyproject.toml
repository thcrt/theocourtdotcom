[project]
name = "theocourtdotcom"
version = "2.0.0"
description = "Add your description here"
authors = [
    { name = "thcrt", email = "110127860+thcrt@users.noreply.github.com" }
]
dependencies = [
    "flask>=3.0.2",
    "waitress>=3.0.0",
    "Flask-Vite>=0.3.8",
]
readme = "README.md"
requires-python = ">= 3.12.2"
classifiers = ["Private :: Do Not Upload"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.rye]
managed = true
dev-dependencies = [
    "ruff>=0.3.4",
]

[tool.ruff]
fix = true
line-length = 100
src = ["src"]
preview = true

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    "F",  # pyflakes: find errors
    "E",  # pycodestyle: check pep8 (errors)
    "W",  # pycodestyle: check pep8 (warnings)
    "I",  # isort: check import sorting
    "N",  # pep8-naming: check naming conventions
    "UP",  # pyupgrade: find outdated idioms
    "ANN", # flake8-annotations: check pep3107 function type annotations
    "S",  # flake8-bandit: find security issues
    "B",  # flake8-bugbear: find bugs
    "A",  # flake8-builtins: find builtin shadowing
    "COM",  # flake8-commas: check comma pedantry
    "C4",  # flake8-comprehensions: find comprehension opportunities
    "PIE",  # flake8-pie: misc.
    "SIM",  # flake8-simplify: find simplification opportunities
    "PTH",  # flake8-use-pathlib: check outdated path manipulation
    "PL",  # pylint: static analysis
    "PERF",  # perflint: check performance
    "FURB",  # refurbish: check modernisation
    "RUF",  # the ruff developer's own rules
]
ignore = [
    "W191",
    "E501",
    "E111",
    "E114",
    "E117",
    "D206",
    "D300",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "COM812",
    "COM819",
    "ISC001",
    "ISC002",
    "S104"
]


[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/theocourtdotcom"]
